import axios from "axios";
import type { NextPage } from "next";
import Head from "next/head";
import { createContext, useCallback, useEffect, useState } from "react";
import { wordsArray } from "./api/wordsArray";
import { wordsSet } from "./api/wordsSet";
import Board from "./components/Board";
import Keyboard from "./components/Keyboard";
import Navbar from "./components/Navbar";
import { defaultBoard } from "./components/WordsHelper";

export const AppContext = createContext<any>(defaultBoard);

const Home: NextPage = () => {
	const [board, setBoard] = useState(defaultBoard);
	const [currentWord, setCurrentWord] = useState("");
	const [wordsSet, setWordsSet] = useState<Set<string>>();
	useEffect(() => {
		const set = new Set(wordsArray);
		setWordsSet(set);
	}, []);
	const [currentAttempt, setCurrentAttempt] = useState({
		attempt: 0,
		position: 0,
	});
	useEffect(() => {
		if (currentAttempt.attempt < 1) return;
		console.log("attempt", currentAttempt.attempt);

		let word = "";
		for (let i = 0; i < 5; i++) {
			word += board[currentAttempt.attempt - 1][i];
		}
		if (currentAttempt.attempt > 5 && !(word === currentWord)) {
			setTimeout(() => alert("you lost"), 1200);
			return;
		}
		if (word === currentWord) {
			setTimeout(() => {
				alert("you won");
			}, 1200);
		}
	}, [currentAttempt.attempt]);

	const randomWord = useCallback(async () => {
		const res = await axios.get("http://localhost:3000/api/getRandomWord");
		console.log(res.data);

		return setCurrentWord(res.data);
	}, []);
	if (!currentWord) {
		randomWord();
	}
	const onDelete = () => {
		const currentBoard = [...board];
		if (
			currentAttempt.position === 0 &&
			currentBoard[currentAttempt.attempt][currentAttempt.position] === ""
		)
			return;
		currentBoard[currentAttempt.attempt][currentAttempt.position - 1] = "";
		setBoard(currentBoard);
		setCurrentAttempt({
			attempt: currentAttempt.attempt,
			position: currentAttempt.position - 1,
		});
	};
	const onEnter = () => {
		if (currentAttempt.position !== 5) return;
		let word = "";
		for (let i = 0; i < 5; i++) {
			word += board[currentAttempt.attempt][i];
		}
		if (!wordsSet?.has(word)) {
			// handle wrong word
			alert("NOT IN A WORD LIST");
			return;
		}
		setCurrentAttempt({
			attempt: currentAttempt.attempt + 1,
			position: 0,
		});
	};
	const onLetter = (letter: string) => {
		if (currentAttempt.position > 4) return;
		const currentBoard = [...board];
		currentBoard[currentAttempt.attempt][currentAttempt.position] = letter;
		setBoard(currentBoard);
		setCurrentAttempt({
			attempt: currentAttempt.attempt,
			position: currentAttempt.position + 1,
		});
	};

	return (
		<div className=" bg-black text-white h-screen">
			<Head>
				<title>Wordle clone</title>
				{/* <meta name="description" content="Generated by create next app" /> */}
				<link rel="icon" href="/favicon.ico" />
			</Head>
			<Navbar />
			<main className="flex flex-col justify-center w-full">
				<AppContext.Provider
					value={{
						board,
						setBoard,
						currentAttempt,
						setCurrentAttempt,
						onDelete,
						onEnter,
						onLetter,
						currentWord,
					}}
				>
					<Board />
					<Keyboard />
					<button
						onClick={() => {
							console.log(board, currentAttempt);
						}}
					>
						XDD
					</button>
				</AppContext.Provider>
			</main>

			<footer></footer>
		</div>
	);
};

export default Home;
